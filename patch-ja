diff -u -uwr conf/httpd.conf-dist conf/httpd.conf-dist
--- conf/httpd.conf-dist	2009-04-16 23:21:00.000000000 +0300
+++ conf/httpd.conf-dist	2009-04-16 22:13:31.000000000 +0300
@@ -59,6 +59,21 @@
 ServerRoot "@@ServerRoot@@"
 
 #
+# JailDir: The directory to jail(2) to
+#
+# NOTE: When using this all directory/file references in DocumentRoot,
+# <Directory> and <Files> should be relative to this JailDir!
+# JailDir 
+#
+#JailDir "@@ServerRoot@@/htdocs"
+# IP address of jail prison
+#JailAddress "127.0.0.1"
+# hostname for jail prison
+#JailHostname "localhost"
+# securelevel(7) inside jail prison
+#JailSecurelevel 3
+
+#
 # The LockFile directive sets the path to the lockfile used when Apache
 # is compiled with either USE_FCNTL_SERIALIZED_ACCEPT or
 # USE_FLOCK_SERIALIZED_ACCEPT. This directive should normally be left at
Only in conf: httpd.conf-dist.orig
Only in apache_1.3.41: configure.orig
diff -u -uwr src/include/http_conf_globals.h src/include/http_conf_globals.h
--- src/include/http_conf_globals.h	2006-07-12 11:16:05.000000000 +0300
+++ src/include/http_conf_globals.h	2009-04-16 20:43:18.000000000 +0300
@@ -75,7 +75,13 @@
 
 extern API_VAR_EXPORT char ap_server_root[MAX_STRING_LEN];
 extern API_VAR_EXPORT char ap_server_confname[MAX_STRING_LEN];
-
+#if defined(__FreeBSD__)
+#include <osreldate.h>
+#if  defined(__FreeBSD_version) && (__FreeBSD_version > 400000)
+extern API_VAR_EXPORT int  ap_jail_securelevel;
+extern API_VAR_EXPORT struct jail ap_jail;
+#endif
+#endif
 /* for -C, -c and -D switches */
 extern API_VAR_EXPORT array_header *ap_server_pre_read_config;
 extern API_VAR_EXPORT array_header *ap_server_post_read_config;
diff -u -uwr src/main/http_core.c src/main/http_core.c
--- src/main/http_core.c	2006-07-12 11:16:05.000000000 +0300
+++ src/main/http_core.c	2009-04-16 22:24:38.000000000 +0300
@@ -54,6 +54,17 @@
 #define MMAP_LIMIT              (4*1024*1024)
 #endif
 
+#if defined(__FreeBSD__)
+#include <osreldate.h>
+#if  defined(__FreeBSD_version) && (__FreeBSD_version > 400000)
+#include <sys/param.h>
+#include <sys/jail.h>
+#include <sys/sysctl.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#endif
+#endif
+
 typedef struct {
     /* Custom response strings registered via ap_custom_response(),
      * or NULL; check per-dir config if nothing found here
@@ -1236,9 +1247,13 @@
     if (err != NULL) {
         return err;
     }
-
     arg = ap_os_canonical_filename(cmd->pool, arg);
-    if (ap_configtestonly && ap_docrootcheck && !ap_is_directory(arg)) {
+    if (ap_configtestonly && ap_docrootcheck &&
+#if defined(__FreeBSD_version) && (__FreeBSD_version > 400000)
+    !ap_is_directory( (ap_jail.path != NULL && ap_jail.path[0] != '\0')? ap_pstrcat(cmd->pool, ap_jail.path, "/", arg, NULL) : arg) ) {
+#else 
+    !ap_is_directory(arg)) {
+#endif
 	if (cmd->server->is_virtual) {
 	    fprintf(stderr, "Warning: DocumentRoot [%s] does not exist\n",
 		    arg);
@@ -2237,6 +2252,66 @@
     return NULL;
 }
 
+#if defined(__FreeBSD_version) && (__FreeBSD_version > 400000)
+static const char *set_jail_dir(cmd_parms *cmd, void *dummy, char *arg) 
+{
+    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
+
+    if (err != NULL) {
+        return err;
+    }
+
+    arg = ap_os_canonical_filename(cmd->pool, arg);
+
+    if (!ap_is_directory(arg)) {
+        return "JailDir must be a valid directory";
+    }
+    ap_jail.path = arg;
+    return NULL;
+}
+
+static const char *set_jail_hostname(cmd_parms *cmd, void *dummy, char *arg)
+{
+    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
+
+    if (err != NULL) {
+        return err;
+    }
+    ap_jail.hostname = arg;
+    return NULL;
+}
+
+static const char *set_jail_address(cmd_parms *cmd, void *dummy, char *arg)
+{
+    struct in_addr in;
+    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
+
+    if (err != NULL) {
+        return err;
+    }
+    if (!inet_aton(arg, &in)) {
+	return "could not make sense of jail ip address";
+    }
+#if ((__FreeBSD_version >= 800000 && __FreeBSD_version < 800056) || __FreeBSD_version < 701103)
+    ap_jail.ip_number = ntohl(in.s_addr);
+#else
+    ap_jail.ip4[0].s_addr = in.s_addr;
+#endif
+    return NULL;
+}
+
+static const char *set_jail_securelevel(cmd_parms *cmd, void *dummy, char *arg) 
+{
+    const char *err = ap_check_cmd_context(cmd, GLOBAL_ONLY);
+
+    if (err != NULL) {
+        return err;
+    }
+    ap_jail_securelevel = strtol(arg, 0, 10) & 0x03;
+    return NULL;
+}
+#endif /* defined(__FreeBSD_version) */
+
 static const char *set_timeout(cmd_parms *cmd, void *dummy, char *arg)
 {
     const char *err = ap_check_cmd_context(cmd, NOT_IN_DIR_LOC_FILE|NOT_IN_LIMIT);
@@ -3539,7 +3614,16 @@
   TAKE1, "The name of the default charset to add to any Content-Type without one or 'Off' to disable" },
 
 /* Old resource config file commands */
-  
+#if  defined(__FreeBSD_version) && (__FreeBSD_version > 400000)
+{ "JailDir", set_jail_dir, NULL, RSRC_CONF, TAKE1,
+  "The directory to jail(2) into" },
+{ "JailHostname", set_jail_hostname, NULL, RSRC_CONF, TAKE1,
+  "The hostname of jail prison" },
+{ "JailAddress", set_jail_address, NULL, RSRC_CONF, TAKE1,
+  "The IP address of jail prison" },
+{ "JailSecureLevel", set_jail_securelevel, NULL, RSRC_CONF, TAKE1,
+  "The securelevel inside jail prison" },
+#endif
 { "AccessFileName", set_access_name, NULL, RSRC_CONF, RAW_ARGS,
   "Name(s) of per-directory config files (default: .htaccess)" },
 { "DocumentRoot", set_document_root, NULL, RSRC_CONF, TAKE1,
diff -u -uwr src/main/http_main.c src/main/http_main.c
--- src/main/http_main.c	2007-11-15 23:31:15.000000000 +0200
+++ src/main/http_main.c	2009-04-16 22:23:30.000000000 +0300
@@ -241,6 +241,17 @@
 #endif
 #endif
 
+#if defined(__FreeBSD__)
+#include <osreldate.h>
+#if  defined(__FreeBSD_version) && (__FreeBSD_version > 400000)
+#include <sys/param.h>
+#include <sys/jail.h>
+#include <sys/sysctl.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#endif
+#endif
+
 int ap_dump_settings = 0;
 API_VAR_EXPORT int ap_extended_status = 0;
 
@@ -270,7 +281,15 @@
  */
 listen_rec *ap_listeners=NULL;
 static listen_rec *head_listener;
-
+#if defined(__FreeBSD_version) && ((__FreeBSD_version >= 800000 && __FreeBSD_version < 800056) || __FreeBSD_version < 701103)
+API_VAR_EXPORT struct jail ap_jail = { .version = 0, .path = NULL, .hostname = "localhost", .ip_number = INADDR_LOOPBACK };
+API_VAR_EXPORT int  ap_jail_securelevel = 3;
+#elif defined(__FreeBSD_version) && (__FreeBSD_version >= 800056)
+#error "Must be FIXED!!!"
+static struct in_addr ip4 = { .s_addr = 0 /*htonl(INADDR_LOOPBACK)*/ };
+API_VAR_EXPORT struct jail ap_jail = { .version = JAIL_API_VERSION, .path = NULL, .hostname = "localhost", .ip4s = 1, .ip4 = &ip4 };
+API_VAR_EXPORT int  ap_jail_securelevel = 3;
+#endif */ __FreeBSD_version */
 API_VAR_EXPORT char ap_server_root[MAX_STRING_LEN]="";
 API_VAR_EXPORT char ap_server_confname[MAX_STRING_LEN]="";
 API_VAR_EXPORT char ap_coredump_dir[MAX_STRING_LEN]="";
@@ -4483,6 +4502,42 @@
     }
     GETUSERMODE();
 #else
+
+#if defined(__FreeBSD_version) && (__FreeBSD_version > 400000)
+    if (ap_jail.path != NULL && ap_jail.path[0] != '\0') {
+	if (!ap_standalone) {
+	    ap_log_error(APLOG_MARK, APLOG_ALERT, server_conf,
+			"Can't jail when not in standalone mode");
+	    exit(1);
+	}
+	if (geteuid()) {
+	    ap_log_error(APLOG_MARK, APLOG_ALERT, server_conf,
+			"Can't jail when not started as root");
+	    exit(1);
+	}
+	if (chdir(ap_jail.path)) {
+	    ap_log_error(APLOG_MARK, APLOG_ALERT, server_conf,
+			"Unable to chdir to %s", ap_jail.path);
+	    exit(1);
+	}
+	if (jail(&ap_jail) == -1) {
+	    ap_log_error(APLOG_MARK, APLOG_ALERT, server_conf,
+			"Unable to jail to %s", ap_jail.path);
+	    exit(1);
+	}
+	if (chdir("/") != 0) {
+	    ap_log_error(APLOG_MARK, APLOG_ALERT, server_conf,
+			"Can't chdir to new root");
+	    exit(1);
+	}
+	if (ap_jail_securelevel > 0) {
+	    if (sysctl((int[]){ CTL_KERN, KERN_SECURELVL }, 2, 0, 0,
+		    (void*)&ap_jail_securelevel, sizeof(ap_jail_securelevel)) != 0)
+		ap_log_error(APLOG_MARK, APLOG_ALERT, server_conf,
+			    "Can't set kern.securelevel via sysctl()");
+	}
+    }
+#endif
     /* 
      * Only try to switch if we're running as root
      * In case of Cygwin we have the special super-user named SYSTEM
@@ -5448,6 +5503,12 @@
 	ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_NOTICE, server_conf,
 		    "Accept mutex: %s (Default: %s)",
 		     amutex->name, ap_default_mutex_method());
+#if defined(__FreeBSD_version) && (__FreeBSD_version > 400000)
+	if (ap_jail.path != NULL && ap_jail.path[0] != '\0') {
+	    ap_log_error(APLOG_MARK, APLOG_NOERRNO|APLOG_NOTICE, server_conf,
+			 "Jail directory: %s", ap_jail.path);
+	}
+#endif
 	restart_pending = shutdown_pending = 0;
 
 	while (!restart_pending && !shutdown_pending) {
diff -u -uwr src/main/http_request.c src/main/http_request.c
--- src/main/http_request.c	2006-07-12 11:16:05.000000000 +0300
+++ src/main/http_request.c	2009-04-16 23:17:16.000000000 +0300
@@ -182,7 +182,7 @@
         /* Advance over trailing slashes ... NOT part of filename 
          * if file is not a UNC name (Win32 only).
          */
-        for (cp = end; cp > path && cp[-1] == '/'; --cp)
+        for (cp = end; cp > path+1 && cp[-1] == '/'; --cp)
             continue;
 
     while (cp > path) {
